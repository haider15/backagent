import { Agent, handoff, Trace, run } from '@openai/agents';
import levenshtein from 'fast-levenshtein';

// Mod√®le OpenAI utilis√©
const mymodel = 'gpt-3.5-turbo';

// === Agent 3 : Validation SQL ===
export const validateAgent_ = Agent.create({
  name: 'validateAgent_',
  model: mymodel,
  instructions: `
Tu es un expert SQL qui valide la requ√™te SQL fournie par l'agent pr√©c√©dent.
Si la requ√™te est valide, r√©pond **uniquement** par la requ√™te SQL √† ex√©cuter.
Sinon, r√©pond par :
SELECT 'Requ√™te SQL non valide.' AS message;
`,
  hooks: {
    async beforeRun(ctx) {
      console.log("üîç [validateAgent_] Entr√©e :", ctx.input);
    },
    async afterRun(ctx) {
      console.log("‚úÖ [validateAgent_] Sortie :", ctx.output);
      ctx.trace = ctx.trace || new Trace({ name: 'validateAgent Trace', conversationId: ctx.conversationId });
    }
  }
});

// === Agent d'ex√©cution SQL ===
export const executeAgent_ = Agent.create({
  name: 'executeAgent_',
  model: mymodel,
  instructions: `
Tu es un agent qui re√ßoit uniquement une requ√™te SQL SELECT valide.
Tu dois ex√©cuter cette requ√™te SQL sur la base de donn√©es (via un hook).
Tu renvoies STRICTEMENT le JSON des r√©sultats, sans aucun texte additionnel.
`,
  hooks: {
    async beforeRun(ctx) {
      const db = ctx.db;
      const sql = ctx.input.trim();

      console.log("üöÄ [executeAgent_] Ex√©cution SQL :", sql);

      if (!sql.toUpperCase().startsWith("SELECT")) {
        ctx.output = JSON.stringify([{ message: "Requ√™te SQL non valide pour ex√©cution." }]);
        return;
      }

      try {
        const [rows] = await db.execute(sql);
        ctx.output = JSON.stringify(rows);
      } catch (e) {
        ctx.output = JSON.stringify([{ message: `Erreur ex√©cution SQL : ${e.message}` }]);
      }
    },
    async afterRun(ctx) {
      console.log("‚úÖ [executeAgent_] R√©sultat JSON :", ctx.output);
      ctx.trace = ctx.trace || new Trace({ name: 'executeAgent Trace', conversationId: ctx.conversationId });
    }
  }
});

// === Agent 2 : G√©n√©ration SQL ===
export const sqlAgent_ = Agent.create({
  name: 'sqlAgent_',
  model: mymodel,
  instructions: `
Tu es un expert SQL sp√©cialis√© en MySQL.
Ta t√¢che : g√©n√©rer UNIQUEMENT une requ√™te SQL valide pour la base "lumiere_final1".
Ne jamais inclure de texte explicatif.

‚ö†Ô∏è R√®gle importante : 
Ne jamais utiliser une sous-requ√™te avec '=' qui retourne plusieurs lignes. 
Utilise IN (...) ou une sous-requ√™te corr√©l√©e.

Structure des tables :

- camion (
    matricule VARCHAR,
    code_site VARCHAR,
    capacite_palette INT,
    activite VARCHAR,
    etat ENUM('disponible', 'en panne'),
    performance_jour DECIMAL,
    nombre_voyages INT,
    date_voyage DATE,
    realisation_voyage VARCHAR
)

- chauffeur (
    matricule VARCHAR,
    nom VARCHAR,
    code_site VARCHAR,
    activite VARCHAR,
    performance_jour DECIMAL,
    nombre_voyages INT,
    date_voyage DATE,
    realisation_voyage VARCHAR
)

- conversations(id, theme, created_at)
- messages(id, conversation_id, role, content, created_at)
- traces(id, conversation_id, trace_json, created_at)

IMPORTANT :  
Apr√®s avoir g√©n√©r√© la requ√™te SQL, envoie-la √† l'agent "validateAgent_" pour qu'il la valide.  
Ne donne aucune autre information, pas d'explications, uniquement la requ√™te SQL.

Exemples :

1. "Afficher les chauffeurs disponibles"
   SELECT * FROM chauffeur
   WHERE (nombre_voyages = 0 OR realisation_voyage = '1/1')
   ORDER BY performance_jour ASC;

2. "Performance moyenne des chauffeurs par site sur 7 jours"
   SELECT code_site, AVG(performance_jour) AS perf_moyenne
   FROM chauffeur
   WHERE date_voyage >= DATE_SUB(CURDATE(), INTERVAL 7 DAY)
   GROUP BY code_site;

3. "Lister camions disponibles avec capacit√© > 50"
   SELECT matricule, capacite_palette
   FROM camion
   WHERE etat = 'disponible' AND capacite_palette > 50;

4. "Chauffeurs au-dessus de la moyenne de leur site"
   WITH perf_moy AS (
       SELECT code_site, AVG(performance_jour) AS moyenne_site
       FROM chauffeur
       GROUP BY code_site
   )
   SELECT ch.matricule, ch.nom, ch.performance_jour
   FROM chauffeur ch
   JOIN perf_moy pm ON ch.code_site = pm.code_site
   WHERE ch.performance_jour > pm.moyenne_site;

5. "Compter camions en panne par site"
   SELECT code_site, COUNT(*) AS nb_camions_en_panne
   FROM camion
   WHERE etat = 'en panne'
   GROUP BY code_site;

Si la question est trop complexe pour √™tre traduite en SQL :
   SELECT 'Question trop complexe pour √™tre trait√©e par cette base de donn√©es.' AS message;
`,
  handoffs: [handoff(validateAgent_)], // Transfert automatique vers validateAgent_ apr√®s g√©n√©ration
  hooks: {
    async beforeRun(ctx) {
      console.log("üõ†Ô∏è [sqlAgent_] Entr√©e :", ctx.input);
    },
    async afterRun(ctx) {
      console.log("üì§ [sqlAgent_] Sortie :", ctx.output);
    }
  }
});

// === Agent 1 : D√©tection de compatibilit√© ===
const keywords = [
  // Camion / v√©hicule
  "camion", "camions", "camionn", "camionns", "vehicule", "vehicules", "v√©hicule", "v√©hicules",

  // Chauffeur / conducteur
  "chauffeur", "chauffeurs", "chauffeurss", "conducteur", "conducteurs",

  // Colonnes communes
  "matricule", "code_site", "activite", "activit√©",
  "performance_jour", "nombre_voyages", "date_voyage", "realisation_voyage",
  "capacite_palette", "etat",

  // √âtats / situations
  "disponible", "disponibles", "dispo", "en service",
  "en panne", "panne", "hors service",

  // Fonctions SQL usuelles
  "afficher", "donner", "lister", "montrer", "pr√©senter", "recuperer", "obtenir", "voir",
  "tri√©", "class√©", "ordonn√©", "ordre", "croissant", "d√©croissant", "ascendant", "descendant",
  "compter", "nombre", "total", "somme", "moyenne", "max", "min",
  "avec", "o√π", "dont", "ayant", "filtrer", "condition", "sup√©rieur", "inf√©rieur", "√©gal",
  "group√©", "par site", "par activit√©", "par code_site"
];

// --- Fonction utilitaire pour v√©rifier si la question est li√©e √† la base ---
function isRelatedToDB(question) {
  const words = question.toLowerCase().split(/\s+/);
  return words.some(w =>
    keywords.some(k => levenshtein.get(w, k.toLowerCase()) <= 2) // Tol√©rance : 2 lettres
  );
}

// === Agent principal ===
export const agentMain_ = Agent.create({
  name: 'agentMain_',
  model: mymodel,
  instructions: `
Tu es l'agent principal qui d√©cide si la question est compatible avec la base "lumiere_final1".

Tables :
- chauffeur : matricule, nom, code_site, activite, performance_jour, nombre_voyages, date_voyage, realisation_voyage
- camion : matricule, code_site, capacite_palette, activite, etat, performance_jour, nombre_voyages, date_voyage, realisation_voyage

Ta mission :
- Si la question parle de ces tables, colonnes ou concepts li√©s, elle est compatible.
- Tol√®re fautes de frappe, pluriels, synonymes.
- Les mots-cl√©s / synonymes sont d√©j√† analys√©s en amont (fuzzy match).

Si compatible => passer au sqlAgent_.
Sinon => renvoyer : SELECT 'Question non compatible avec la base de donn√©es.' AS message;
`,
  handoffs: [handoff(sqlAgent_)], // ‚ö† sqlAgent_ doit √™tre d√©fini ailleurs
  hooks: {
    async beforeRun(ctx) {
      console.log("üèÅ [agentMain_] Question :", ctx.input);

      if (!isRelatedToDB(ctx.input)) {
        console.log("‚ùå Question jug√©e non compatible");
        ctx.input = "SELECT 'Question non compatible avec la base de donn√©es.' AS message;";
      } else {
        console.log("‚úÖ Question jug√©e compatible");
      }
    },
    async afterRun(ctx) {
      console.log("üì§ [agentMain_] Sortie :", ctx.output);
    }
  }
});

// === Agent de visualisation ===
export const visualiserAgent_ = Agent.create({
  name: 'visualiserAgent_',
  model: mymodel,
  instructions: `
Tu es un agent de visualisation qui re√ßoit une requ√™te SQL SELECT et ses r√©sultats (format JSON).

Ta t√¢che : renvoyer STRICTEMENT un JSON valide d√©crivant une visualisation adapt√©e √† ces donn√©es.

Le JSON doit contenir :
- type : "table", "bar", "pie", "line", ou autre type de graphique
- labels : liste des labels (ex: noms de cat√©gories)
- datasets : liste d'objets avec "label" et "data" (tableau de valeurs num√©riques ou paires x/y)
- (optionnel) options : objet avec options du graphique

Exemple pour un graphique √† barres :
{
  "type": "bar",
  "labels": ["Site A", "Site B", "Site C"],
  "datasets": [{
    "label": "Nombre camions en panne",
    "data": [5, 3, 7]
  }]
}

Exemple pour un graphique en secteurs (pie) :
{
  "type": "pie",
  "labels": ["Disponible", "En panne"],
  "datasets": [{
    "label": "R√©partition des camions",
    "data": [12, 5]
  }]
}

Exemple pour un graphique en lignes (line) :
{
  "type": "line",
  "labels": ["2025-08-01", "2025-08-02", "2025-08-03", "2025-08-04"],
  "datasets": [{
    "label": "Performance moyenne journali√®re des chauffeurs",
    "data": [78.5, 80.2, 82.1, 79.8]
  }]
}

Exemple pour un graphique en nuage de points (scatter) :
{
  "type": "scatter",
  "datasets": [{
    "label": "Performance vs Voyages",
    "data": [
      { "x": 5, "y": 80 },
      { "x": 8, "y": 85 },
      { "x": 3, "y": 70 }
    ]
  }]
}

Exemple pour un diagramme en radar :
{
  "type": "radar",
  "labels": ["Vitesse", "S√©curit√©", "Ponctualit√©", "Service client"],
  "datasets": [{
    "label": "Score chauffeur A",
    "data": [85, 90, 80, 75]
  }]
}

Exemple pour un diagramme √† bulles (bubble) :
{
  "type": "bubble",
  "datasets": [{
    "label": "Volume de chargement",
    "data": [
      { "x": 5, "y": 80, "r": 10 },
      { "x": 8, "y": 85, "r": 15 },
      { "x": 3, "y": 70, "r": 8 }
    ]
  }]
}

Exemple pour un tableau :
{
  "type": "table",
  "columns": ["matricule", "code_site", "etat"],
  "rows": [
    ["M123", "Site A", "disponible"],
    ["M456", "Site B", "en panne"]
  ]
}
`
});



// --- Chaine des handoffs ---
agentMain_.handoffs = [handoff(sqlAgent_)];
sqlAgent_.handoffs = [handoff(validateAgent_)];
validateAgent_.handoffs = [handoff(executeAgent_)];
executeAgent_.handoffs = [handoff(visualiserAgent_)];

// === Fonctions utilitaires ===

function extractAgentOutput(agentResponse) {
  if (!agentResponse) return '(aucune r√©ponse)';
  if (typeof agentResponse === 'string') return agentResponse;
  if (agentResponse.value && typeof agentResponse.value === 'string') return agentResponse.value;
  if (agentResponse.state && agentResponse.state._currentStep && typeof agentResponse.state._currentStep.output === 'string') {
    return agentResponse.state._currentStep.output;
  }
  try {
    return JSON.stringify(agentResponse).slice(0, 500);
  } catch {
    return '(impossible de parser la r√©ponse)';
  }
}

function cleanSqlQuery(rawText) {
  return rawText
    .replace(/```sql\s*/gi, '')
    .replace(/```/gi, '')
    .trim();
}

function extractFinalSql(agentResponse) {
  const output = extractAgentOutput(agentResponse).trim();
  if (output.toUpperCase().startsWith('SELECT')) {
    return output;
  }
  return null;
}

async function executeSqlAndFormat(db, sql) {
  const [rows] = await db.execute(sql);
  return rows;
}

// === Fonction principale handleChat ===

export const handleChat = async (req, res) => {
  const db = req.db;
  const { message: userMessage, conversationId } = req.body;

  if (!userMessage || !conversationId) {
    return res.status(400).json({ error: 'Message et conversationId requis' });
  }

  try {
    const parentTrace = new Trace({ name: `Trace Conversation ${conversationId}`, conversationId });

    // Enregistrer la question utilisateur
    await db.execute('INSERT INTO messages (conversation_id, role, content) VALUES (?, ?, ?)', [conversationId, 'user', userMessage]);

    console.log('--- D√©but Agent Main : analyse compatibilit√© ---');
    // Important: passer db dans contexte pour que executeAgent puisse ex√©cuter la requ√™te
    const mainAgentResponse = await run(agentMain_, [{ role: 'user', content: userMessage }], { trace: parentTrace, db });

    // Extraction SQL finale (du validateAgent_)
    const sqlGenerated = extractFinalSql(mainAgentResponse);

    if (!sqlGenerated) {
      const errMsg = "La requ√™te SQL n'a pas pu √™tre g√©n√©r√©e ou est invalide.";
      console.warn(errMsg);
      await db.execute('INSERT INTO messages (conversation_id, role, content) VALUES (?, ?, ?)', [conversationId, 'assistant', errMsg]);
      return res.json({ reply: errMsg });
    }

    const cleanSql = cleanSqlQuery(sqlGenerated);
    console.log('--- Requ√™te SQL finale valid√©e par agents ---');
    console.log(cleanSql);

    // Ex√©cuter la requ√™te SQL
    const sqlResults = await executeSqlAndFormat(db, cleanSql);

    if (!sqlResults || sqlResults.length === 0) {
      const emptyMsg = "Aucun r√©sultat trouv√© pour cette requ√™te.";
      await db.execute('INSERT INTO messages (conversation_id, role, content) VALUES (?, ?, ?)', [conversationId, 'assistant', emptyMsg]);

      const traceData = parentTrace.toJSON();
      await db.execute('INSERT INTO traces (conversation_id, trace_json) VALUES (?, ?)', [conversationId, JSON.stringify(traceData)]);

      return res.json({
        reply: emptyMsg,
        visualizationType: "table",
        vizData: { type: "table", columns: [], rows: [] },
        rawResults: [],
        trace: traceData,
      });
    }

    // Pr√©parer l'entr√©e pour l'agent de visualisation (SQL + r√©sultats JSON)
    const visualisationInput = JSON.stringify({
      sql: cleanSql,
      results: sqlResults
    });

    // Obtenir la visualisation JSON
    const visualisationResponse = await run(visualiserAgent_, [{ role: 'user', content: visualisationInput }], { trace: parentTrace });

    const visualisationJsonText = extractAgentOutput(visualisationResponse);

    let visualizationData;
    try {
      visualizationData = JSON.parse(visualisationJsonText);
      console.log('üìä Visualisation JSON analys√©e :', visualizationData);

      // === AJOUT : Sauvegarder la visualisation en base ===
      try {
        await db.execute(
          'INSERT INTO visualisations (conversation_id, viz_json) VALUES (?, ?)',
          [conversationId, JSON.stringify(visualizationData)]
        );
        console.log("‚úÖ Visualisation sauvegard√©e en base.");
      } catch (e) {
        console.warn("‚ö†Ô∏è Erreur sauvegarde visualisation :", e.message);
      }

    } catch (err) {
      console.warn('Erreur parsing visualisation JSON:', err);
      console.warn('Contenu re√ßu:', visualisationJsonText);
      visualizationData = { 
        type: 'table', 
        columns: Object.keys(sqlResults[0] || {}), 
        rows: sqlResults.map(r => Object.values(r)) 
      };
    }

    // Construire la r√©ponse assistant
    const assistantMessage = `Voici la visualisation des donn√©es.`;

    // Enregistrer la r√©ponse assistant
    await db.execute('INSERT INTO messages (conversation_id, role, content) VALUES (?, ?, ?)', [conversationId, 'assistant', assistantMessage]);

    // Sauvegarder la trace
    const traceData = parentTrace.toJSON();
    await db.execute('INSERT INTO traces (conversation_id, trace_json) VALUES (?, ?)', [conversationId, JSON.stringify(traceData)]);

    // Renvoi au frontend
    return res.json({
      reply: assistantMessage,
      visualizationType: visualizationData.type,
      vizData: visualizationData,
      rawResults: sqlResults,
      trace: traceData,
      sql: cleanSql, // Optionnel, pour debug frontend
    });

  } catch (error) {
    console.error('Erreur serveur inattendue:', error);
    return res.status(500).json({ error: 'Erreur serveur', details: error.message });
  }
};

// === Fonctions pour g√©rer les conversations ===

export const createConversation = async (req, res) => {
  const db = req.db;
  const { theme } = req.body;

  if (!theme) return res.status(400).json({ error: 'Th√®me requis' });

  try {
    const [result] = await db.execute('INSERT INTO conversations (theme) VALUES (?)', [theme]);
    res.status(201).json({ conversationId: result.insertId, message: 'Conversation cr√©√©e' });
  } catch (error) {
    console.error('Erreur cr√©ation conversation :', error);
    res.status(500).json({ error: 'Erreur serveur' });
  }
};

export const getHistory = async (req, res) => {
  const db = req.db;
  const { conversationId } = req.params;

  if (!conversationId) return res.status(400).json({ error: 'conversationId requis' });

  try {
    const [rows] = await db.execute(
      'SELECT role, content FROM messages WHERE conversation_id = ? ORDER BY id ASC',
      [conversationId]
    );
    res.json(rows);
  } catch (error) {
    console.error('Erreur getHistory :', error);
    res.status(500).json({ error: 'Erreur serveur' });
  }
};

export const getConversations = async (req, res) => {
  const db = req.db;

  try {
    const [rows] = await db.execute('SELECT id, theme FROM conversations ORDER BY id DESC');
    res.json(rows);
  } catch (error) {
    console.error('Erreur getConversations :', error);
    res.status(500).json({ error: 'Erreur serveur' });
  }
};

export const deleteConversation = async (req, res) => {
  const db = req.db;
  const { id } = req.params;

  if (!id) return res.status(400).json({ error: 'ID conversation requis' });

  try {
    await db.execute('DELETE FROM messages WHERE conversation_id = ?', [id]);
    await db.execute('DELETE FROM traces WHERE conversation_id = ?', [id]);
    await db.execute('DELETE FROM conversations WHERE id = ?', [id]);
    res.json({ message: 'Conversation supprim√©e' });
  } catch (error) {
    console.error('Erreur suppression conversation :', error);
    res.status(500).json({ error: 'Erreur serveur' });
  }
};
//////
// Ajouter une visualisation pour une conversation donn√©e
export const addVisualisation = async (req, res) => {
  const db = req.db;
  const { conversationId, vizJson } = req.body;

  if (!conversationId || !vizJson) {
    return res.status(400).json({ error: "conversationId et vizJson requis" });
  }

  try {
    await db.execute(
      'INSERT INTO visualisations (conversation_id, viz_json) VALUES (?, ?)',
      [conversationId, JSON.stringify(vizJson)]
    );
    res.status(201).json({ message: "Visualisation ajout√©e" });
  } catch (error) {
    console.error("Erreur addVisualisation:", error);
    res.status(500).json({ error: "Erreur serveur" });
  }
};

// R√©cup√©rer toutes les visualisations d'une conversation
export const getVisualisations = async (req, res) => {
  const db = req.db;
  const { conversationId } = req.params;

  if (!conversationId) return res.status(400).json({ error: "conversationId requis" });

  try {
    const [rows] = await db.execute(
      'SELECT id, viz_json, created_at FROM visualisations WHERE conversation_id = ? ORDER BY created_at DESC',
      [conversationId]
    );
    // parser JSON pour chaque ligne
    const visualisations = rows.map(row => ({
      id: row.id,
      vizJson: JSON.parse(row.viz_json),
      createdAt: row.created_at,
    }));
    res.json(visualisations);
  } catch (error) {
    console.error("Erreur getVisualisations:", error);
    res.status(500).json({ error: "Erreur serveur" });
  }
};

// Supprimer une visualisation par ID
export const deleteVisualisation = async (req, res) => {
  const db = req.db;
  const { id } = req.params;

  if (!id) return res.status(400).json({ error: "ID visualisation requis" });

  try {
    await db.execute('DELETE FROM visualisations WHERE id = ?', [id]);
    res.json({ message: "Visualisation supprim√©e" });
  } catch (error) {
    console.error("Erreur deleteVisualisation:", error);
    res.status(500).json({ error: "Erreur serveur" });
  }
};

